/**
 * Tests for the package variable name cleanup functionality
 */

import { afterAll, beforeAll, describe, expect, it } from 'bun:test'
import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

// Get the current directory name
const __dirname = path.dirname(fileURLToPath(import.meta.url))
const TEST_PACKAGES_DIR = path.join(__dirname, 'fixtures/packages')

/**
 * Create test package files with invalid/valid variable names for testing
 */
function setupTestPackages() {
  // Ensure the test directory exists
  fs.mkdirSync(TEST_PACKAGES_DIR, { recursive: true })

  // Create a test file with hyphenated variable names
  const hyphenatedFile = path.join(TEST_PACKAGES_DIR, 'test-hyphen.ts')
  const hyphenatedContent = `
import type { PkgxPackage } from '../../src/types'

/**
 * test-hyphenPackage information from pkgx.dev
 * Generated by ts-pkgx
 */
export const test-hyphenPackage: PkgxPackage = {
  "name": "test-package",
  "domain": "test.com/hyphen-test",
  "description": "Test package with hyphenated name"
}

export interface test-hyphenPackage {
  name: string
  domain: string
  description: string
}
`
  fs.writeFileSync(hyphenatedFile, hyphenatedContent)

  // Create a test file with valid variable names
  const validFile = path.join(TEST_PACKAGES_DIR, 'testvalid.ts')
  const validContent = `
import type { PkgxPackage } from '../../src/types'

/**
 * testvalidPackage information from pkgx.dev
 * Generated by ts-pkgx
 */
export const testvalidPackage: PkgxPackage = {
  "name": "test-valid",
  "domain": "test.com/valid",
  "description": "Test package with valid name"
}

export interface testvalidPackage {
  name: string
  domain: string
  description: string
}
`
  fs.writeFileSync(validFile, validContent)
}

/**
 * Clean up test files after tests are done
 */
function cleanupTestPackages() {
  try {
    fs.rmSync(TEST_PACKAGES_DIR, { recursive: true, force: true })
  }
  catch (error) {
    console.error('Error cleaning up test packages:', error)
  }
}

// Create a modified version of the fixPackageVariables function for testing
async function fixTestPackageVariables(): Promise<void> {
  console.error(`Scanning ${TEST_PACKAGES_DIR} for files with hyphenated variable names...`)

  // Read all .ts files in the packages directory
  const files = fs.readdirSync(TEST_PACKAGES_DIR)
    .filter(file => file.endsWith('.ts') && file !== 'index.ts')

  console.error(`Found ${files.length} package files to check`)

  let fixedCount = 0

  for (const file of files) {
    const filePath = path.join(TEST_PACKAGES_DIR, file)
    const content = fs.readFileSync(filePath, 'utf-8')

    // Pattern to find hyphens in export const or interface declarations
    const exportConstPattern = /export\s+const\s+(\w+)-(\w+)Package/g
    const interfacePattern = /export\s+interface\s+(\w+)-(\w+)Package/g

    // Replace hyphenated names with concatenated names (removing the hyphen)
    let newContent = content.replace(exportConstPattern, 'export const $1$2Package')
    newContent = newContent.replace(interfacePattern, 'export interface $1$2Package')

    // Check if we made any changes
    if (newContent !== content) {
      fs.writeFileSync(filePath, newContent)
      console.error(`Fixed hyphenated variable names in: ${file}`)
      fixedCount++
    }
  }

  console.error(`\nFixed hyphenated variable names in ${fixedCount} files`)
}

describe('Package variable name cleanup', () => {
  beforeAll(() => {
    setupTestPackages()
  })

  afterAll(() => {
    cleanupTestPackages()
  })

  it('should correct hyphenated variable names', async () => {
    // Run the fix function on our test directory
    await fixTestPackageVariables()

    // Read the fixed file content
    const fixedFilePath = path.join(TEST_PACKAGES_DIR, 'test-hyphen.ts')
    const fixedContent = fs.readFileSync(fixedFilePath, 'utf-8')

    // Check that hyphens are removed from variable names
    expect(fixedContent).toContain('export const testhyphenPackage')
    expect(fixedContent).toContain('export interface testhyphenPackage')

    // Make sure it doesn't contain the invalid hyphenated names in the exports
    // (it may still be in comments)
    expect(fixedContent).not.toContain('export const test-hyphenPackage')
    expect(fixedContent).not.toContain('export interface test-hyphenPackage')
  })

  it('should leave valid variable names unchanged', async () => {
    // Read the content before fixing
    const validFilePath = path.join(TEST_PACKAGES_DIR, 'testvalid.ts')
    const originalContent = fs.readFileSync(validFilePath, 'utf-8')

    // Run the fix function
    await fixTestPackageVariables()

    // Read the file content after fixing
    const fixedContent = fs.readFileSync(validFilePath, 'utf-8')

    // Content should be unchanged
    expect(fixedContent).toBe(originalContent)
  })
})
